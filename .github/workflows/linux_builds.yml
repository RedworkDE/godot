name: 🐧 Linux Builds
on:
  workflow_call:

# Global Settings
env:
  # Used for the cache key, and godot-cpp checkout. Add version suffix to force clean build.
  GODOT_BASE_BRANCH: master
  SCONSFLAGS: verbose=yes warnings=extra werror=yes module_text_server_fb_enabled=yes
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}-linux
  cancel-in-progress: true

jobs:
  build-linux:
    runs-on: "ubuntu-20.04"
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: _0
          - name: _1
          - name: _2
          - name: _3
          - name: _4
          - name: _5
          - name: _6
          - name: _7
          - name: _8
          - name: _9
          - name: _A
          - name: _B
          - name: _C
          - name: _D
          - name: _E
          - name: _F

    steps:
      - uses: actions/checkout@v3

      # Need newer mesa for lavapipe to work properly.
      - name: Linux dependencies for tests
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo add-apt-repository ppa:kisak/kisak-mesa
          sudo apt-get install -qq mesa-vulkan-drivers

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: test-cache
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps

      - name: Setup GCC problem matcher
        uses: ammaraskar/gcc-problem-matcher@master

      - name: Compilation
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} dev_build=yes scu_build=yes debug_symbols=yes use_tsan=yes linker=gold
          platform: linuxbsd
          target: editor
          tests: no
      # - name: Prepare artifact
      #   run: |
      #     chmod +x bin/godot.*
      # - name: Upload artifact
      #   uses: ./.github/actions/upload-artifact
      #   with:
      #     name: ${{ matrix.name }}

      # - name: Download artifacts
      #   uses: dawidd6/action-download-artifact@v2
      #   with:
      #     repo: RedworkDE/godot
      #     run_id: 5427500085
      #     name: ${{ matrix.name }}
      #     skip_unpack: true
      #     path: .
      # - name: Extract artifacts
      #   run: |
      #     unzip "${{ matrix.name }}.zip" -d bin
      #     chmod +x ${{ matrix.bin }}

      # Download and extract zip archive with project, folder is renamed to be able to easy change used project
      - name: Download test project
        run: |
          wget https://github.com/godotengine/regression-test-project/archive/4.0.zip

      # Editor is quite complicated piece of software, so it is easy to introduce bug here
      - name: Open and close editor
        run: |
          failed=0
          for i in {1..15}; do
            echo "Attempt $i"
            unzip 4.0.zip
            mv "regression-test-project-4.0" "test_project"
            ASAN_OPTIONS=debug=true:dump_instruction_bytes=true:quarantine_size_mb=2048 xvfb-run ./bin/godot.linuxbsd.editor.dev.x86_64.san --verbose --audio-driver Dummy --editor --quit --path test_project 2>&1 | tee sanitizers_log.txt || true
            misc/scripts/check_ci_log.py sanitizers_log.txt
            rm -rf test_project
            rm -rf ~/.local/share/godot/
            rm -rf ~/.config/godot/
            rm -rf ~/.cache/godot/
          done
          exit $failed

